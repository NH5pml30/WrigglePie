{
#include "grammar_parse.h"
}

%lexer {
	ws						/[\s\n]+/--
	id						/[a-zA-Z_][a-zA-Z_0-9:<>,*]*/
	tilde					/~/
	open_par			/\(/
	close_par			/\)/
	push					/!push_cache/
	pop						/!pop_cache/
	open_curly		/\{/
	close_curly		/\}/
	lexer_begin		/%lexer/
	parser_begin	/%parser/
	regex					/\/(\\\/|[^\/])*\//
	or						/\|/
	double_colon	/::/
	colon					/:/
	minus					/\-\-/
	any						/./
}

%parser {
	file :: parser_configuration
		: preamble_block lexer_block parser_block	{ _grammar_parse::to_config(std::move($1), std::move($2), std::move($3)) }

	preamble_block :: std::string
		: curly_block	{ $1 }

	lexer_block :: _grammar_parse::lexer_block
		: lexer_begin open_curly lexer_records close_curly	{ std::move($3) }

	lexer_records :: _grammar_parse::lexer_block
		: {}
		| lexer_records lexer_record	{ _grammar_parse::append($1, std::move($2)) }

	lexer_record :: _grammar_parse::lexer_record
		: id regex				{ std::move($1), std::move($2), true }
		| id regex minus	{ std::move($1), std::move($2), false }

	parser_block :: _grammar_parse::parser_block
		: parser_begin open_curly parser_records close_curly	{ std::move($3) }

	parser_records :: _grammar_parse::parser_block
		: parser_record									{ std::move($1) }
		| parser_records parser_record	{ _grammar_parse::append($1, std::move($2)) }

	parser_record :: _grammar_parse::parser_record
		: id double_colon id colon parser_rule_rhss	{ std::move($1), std::move($3), std::move($5) }

	parser_rule_rhss :: std::vector<_grammar_parse::parser_rule_rhs>
		: parser_rule_rhs											{ std::move($1) }
		| parser_rule_rhss or parser_rule_rhs	{ _grammar_parse::append($1, std::move($3)) }

	parser_rule_rhs :: _grammar_parse::parser_rule_rhs
		: parser_rule_content curly_block				{ std::move($1), grammar::cache_action::NONE, std::move($2) }
		| parser_rule_content push curly_block	{ std::move($1), grammar::cache_action::PUSH, std::move($3) }
		| parser_rule_content pop curly_block		{ std::move($1), grammar::cache_action::POP, std::move($3) }

	parser_rule_content :: std::vector<_grammar_parse::parse_rule_content_element>
		: {}
		| parser_rule_content id					{ _grammar_parse::append($1, _grammar_parse::content_el_from_terminal(std::move($2))) }
		| parser_rule_content inv_tokens	{ _grammar_parse::append($1, _grammar_parse::content_el_from_tilde(std::move($2))) }

	inv_tokens :: std::vector<std::string>
		: tilde id												{ std::move($2) }
		| tilde open_par tokens close_par	{ std::move($3) }

	tokens :: std::vector<std::string>
		: id				{ std::move($1) }
		| tokens id	{ _grammar_parse::append<std::string>($1, std::move($2)) }

	curly_begin :: int
		: open_curly !push_cache	{ 0 }
	curly_end :: int
		: close_curly !pop_cache	{ 0 }

	curly_block :: std::string
		: curly_begin curly_block_content curly_end	{ std::move($0) }

	curly_block_content :: int
		: { 0 }
		| curly_block_content ~( open_curly close_curly )	{ 0 }
		| curly_block_content curly_block	{ 0 }
}
